<%
  # returns null if the property does not have a value
  def p_opt(property)
    p(property, nil)
  end

  # returns an empty array of the value is null
  def p_arr(property)
    p_opt(property) || []
  end

  # adds a nested value to a hash
  # for example hash['top-level']['mid-level']['bottom-level'] = value
  # add_value(hash, value, 'top-level', 'mid-level', 'bottom-level'))
  def add_value(hash, value, *keys)
    last_key = nil
    index = 1
    for key in keys
      last_key = key
      if index < keys.length
        sub_hash = hash[key]
        if sub_hash.nil?
          sub_hash = {}
          hash[key] = sub_hash
        elsif !(sub_hash.is_a?(Hash))
          raise ArgumentError, 'Expected a hash for key:'+key+' in nested elements:'+keys.to_s
        end
        hash = sub_hash
      end
      index = index + 1
    end
    hash[last_key] = value
  end

  protocol = p('login.protocol')

  uaa_base = p('uaa.url')

  entity_base_url_fallback = uaa_base.sub("://uaa.", "://login.")

  login_entityBaseUrl = nil
  if_p('login.saml.entity_base_url') do |entity_base_url|
    login_entityBaseUrl = "#{protocol}://#{entity_base_url}"
  end .else do
    login_entityBaseUrl = entity_base_url_fallback
  end

  login_entityId = p(['login.saml.entityid'], login_entityBaseUrl.sub(/^http.*:\/\//,''))

  login_authorizeUrl = "#{p('uaa.url', entity_base_url_fallback)}/oauth/authorize"

  login_url = p('login.url', login_entityBaseUrl)

  # The login secret is defined in one of two properties
  # uaa.login.client_secret or uaa.clients.login.secret
  # If both of these are defined, then use the latter
  login_secret = p('uaa.clients.login.secret', p_opt('uaa.login.client_secret'))
  raise ArgumentError, 'uaa.login.client_secret or uaa.clients.login.secret must be set.' unless login_secret

  params = {
    'name' => 'login',
    'logging' => {
      'config' => '/var/vcap/jobs/login/config/log4j.properties'
    },
    'LOGIN_SECRET' => login_secret,
    'require_https' => p('uaa.require_https'),
    'assetBaseUrl' => p('login.asset_base_url'),
    'logout' => {
      'redirect' => {
        'url' => p('login.logout.redirect.url'),
        'parameter' => {
          'disable' => p('login.logout.redirect.parameter.disable')
        }
      }
    },
    'uaa' => {
      'url' => uaa_base
    },
    'links' => p_arr('login.links'),
    'login' => {
      'url' => login_url,
      'idpDiscoveryEnabled' => p('login.idpDiscoveryEnabled'),
      'entityBaseURL' => login_entityBaseUrl,
      'entityID' => login_entityId,
      'prompt' => {
        'username' => {
          'text' => p('login.prompt.username.text')
        },
        'password' => {
          'text' => p('login.prompt.password.text')
        }
      },
      'authorize' => {
        'url' => login_authorizeUrl
      },
      'saml' => {
        'socket' => {
          'connectionManagerTimeout' => p_opt('login.saml.socket.connectionManagerTimeout'),
          'soTimeout' => p_opt('login.saml.socket.soTimeout')
        }
      }
    }
  }

  add_value(params, p('login.logout.redirect.parameter.whitelist'), 'logout', 'redirect', 'parameter', 'whitelist') if p_opt('login.logout.redirect.parameter.whitelist')

  if_p('login.smtp') do |login_smtp|
    login_smtp.each do |key,val|
      add_value(params, val, 'smtp', key)
    end
  end

  add_value(params, p('login.notifications.url'), 'notifications', 'url') if p_opt('login.notifications.url')

  add_value(params, p('login.branding.company_name'), 'login', 'branding', 'companyName') if p_opt('login.branding.company_name')
  add_value(params, p('login.branding.product_logo'), 'login', 'branding', 'productLogo') if p_opt('login.branding.product_logo')
  add_value(params, p('login.branding.square_logo'), 'login', 'branding', 'squareLogo') if p_opt('login.branding.square_logo')
  add_value(params, p('login.branding.footer_legal_text'), 'login', 'branding', 'footerLegalText') if p_opt('login.branding.footer_legal_text')
  add_value(params, p('login.branding.footer_links'), 'login', 'branding', 'footerLinks') if p_opt('login.branding.footer_links')

  add_value(params, p('login.home_redirect'), 'login', 'homeRedirect') if p_opt('login.home_redirect')

  add_value(params, p('login.saml.serviceProviderCertificate'), 'login', 'serviceProviderCertificate') if p_opt('login.saml.serviceProviderCertificate')
  add_value(params, p('login.saml.serviceProviderKey'), 'login', 'serviceProviderKey') if p_opt('login.saml.serviceProviderKey')
  add_value(params, p('login.saml.serviceProviderKeyPassword'), 'login', 'serviceProviderKeyPassword') if p_opt('login.saml.serviceProviderKeyPassword')

  add_value(params, p('login.self_service_links_enabled'), 'login', 'selfServiceLinksEnabled') if p_opt('login.self_service_links_enabled')

  if_p('login.oauth.providers') do |providers|
    providers.each do |idpAlias, provider|
      provider.each do |key,value|
        if key.to_s.eql?('attributeMappings') then
          value.each do |k,v|
            add_value(params, v, 'login', 'oauth', 'providers', idpAlias, 'attributeMappings', k)
          end
        else
          add_value(params, value, 'login', 'oauth', 'providers', idpAlias, key)
        end
      end
    end
  end

  add_value(params, p('login.saml.signMetaData'), 'login', 'saml', 'signMetaData') if p_opt('login.saml.signMetaData')
  add_value(params, p('login.saml.signRequest'), 'login', 'saml', 'signRequest') if p_opt('login.saml.signRequest')
  add_value(params, p('login.saml.signatureAlgorithm'), 'login', 'saml', 'signatureAlgorithm') if p_opt('login.saml.signatureAlgorithm')
  add_value(params, p('login.saml.wantAssertionSigned'), 'login', 'saml', 'wantAssertionSigned')

  if_p('login.saml.providers') do |samlProviders|
    samlProviders.reject {|k,_| k.to_s == ''}.each do |idpAlias,idpProvider|
      idpProvider.reject {|k,_| %w(idpMetadata).include?(k.to_s)}.each do |key,value|
        if key.to_s.eql?('attributeMappings') then
          value.each do |akey,aval|
            add_value(params, aval, 'login', 'saml', 'providers', idpAlias, 'attributeMappings', akey)
          end
        else
          add_value(params, value, 'login', 'saml', 'providers', idpAlias, key)
        end
      end
      add_value(params, idpProvider['idpMetadata'], 'login', 'saml', 'providers', idpAlias, 'idpMetadata')
    end
  end

  #deprecated single provider legacy configuration
  if_p('login.saml.idpEntityAlias') do |idpEntityAlias|
    add_value(params, p("/var/vcap/jobs/login/#{p_opt('login.saml.idp_metadata_file')}"), 'login', 'saml', 'providers', idpEntityAlias, 'idpMetadata')
    add_value(params, p_opt('login.saml.assertionConsumerIndex'), 'login', 'saml', 'providers', idpEntityAlias, 'assertionConsumerIndex')
    add_value(params, p_opt('login.saml.nameidFormat'), 'login', 'saml', 'providers', idpEntityAlias, 'nameID')
    add_value(params, p_opt('login.saml.metadataTrustCheck'), 'login', 'saml', 'providers', idpEntityAlias, 'metadataTrustCheck')
    add_value(params, true, 'login', 'saml', 'providers', idpEntityAlias, 'showSamlLoginLink')
    add_value(params, 'Use your corporate credentials', 'login', 'saml', 'providers', idpEntityAlias, 'linkText')
    if_p('login.saml.attributeMappings') do |attributeMappings|
      attributeMappings.each do |akey,aval|
        add_value(params, aval, 'login', 'saml', 'providers', idpEntityAlias, 'attributeMappings', akey)
      end
    end
  end

  if_p('login.analytics.code', 'login.analytics.domain') do |code, domain|
    add_value(params, code, 'analytics', 'code')
    add_value(params, domain, 'analytics', 'domain')
  end
%>
<%=YAML.dump(params, :indentation => 2)%>


